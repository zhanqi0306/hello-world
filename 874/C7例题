/*7.1输入一行字符，统计其中各个大写字母出现的次数
#include <stdio.h>
#include <memory.h>
int main(){
	char ch;
	int num[26],i;

	memset(num,0,26*sizeof(int));
	while ((ch = getchar()) != '\n')
		if (ch >= 'A' && ch <= 'Z')
			num[ch-'A']++;
	for ( i = 0; i < 26; i++){
		if (i % 9 == 0)
			printf("\n");
		printf("%c(%d)",'A'+i,num[i]);
	}
	printf("\n");
	return 0;
}
1.memset函数的用法
2.使用了输入字符-'A'这种方法来确定数组的下标
*/
/*7-2用冒泡排序法将10个整数按照从小到大的顺序排序
#include<stdio.h>
#define NUM 10
int main(){
	int a[NUM],i,j,t;
	printf("input %d numbers:\n",NUM);
	for ( i = 0; i < NUM; i++)
		scanf("%d",&a[i]);
	for ( i = 1; i < NUM; i++) //对10个数字进行排序 一共排9次 冒泡了9回 就可以得到完整的有序的序列啦
		for ( j = 0;j<NUM-i;j++)
		{
			if (a[j] > a[j+1])
			{
				t = a[j];
				a[j] = a[j+1];
				a[j+1] = t;
			}	
		}
		
	printf("the sorted numbers:\n");
	for ( i = 0; i < NUM; i++)
		printf("%d ",a[i]);
	return 0;
}*/

/*7-3冒泡排序算法优化 添加一个flag标志变量
#include<stdio.h>
#define NUM 10
int main(){
	int a[NUM],i,j,t;
	int flag = 0;
	printf("input %d numbers:\n",NUM);
	for ( i = 0; i < NUM; i++)
		scanf("%d",&a[i]);
	for ( i = 1; i < NUM; i++){ //对10个数字进行排序 一共排9次 冒泡了9回 就可以得到完整的有序的序列啦
		flag = 0; //每一趟冒泡的时候 都置为0 
		for ( j = 0;j<NUM-i;j++)
		{
			if (a[j] > a[j+1])
			{
				flag = 1; //如果本次有元素交换 就变成1 如果没有元素交换 就还是0
				t = a[j];
				a[j] = a[j+1];
				a[j+1] = t;
			}	
		}
		if (flag == 0) //如果执行一趟冒泡以后 flag没有变 就说明已经是有序的了 直接退出即可
			break;		
	}
		
	printf("the sorted numbers:\n");
	for ( i = 0; i < NUM; i++)
		printf("%d ",a[i]);
	return 0;
}*/

/*7-4 选择排序 将10个整数从小到大的顺序排序
#include<stdio.h>
#define NUM 10
int main(){
	int a[NUM];
	printf("input %d numbers:\n",NUM);
	for (int i = 0; i < NUM; i++)
		scanf("%d",&a[i]);

	int k,j,t,i;
	for (i = 0; i < NUM-1; i++) //对十个元素排序，只需要排9次就可以了
	{
		k=i;
		for (j=i+1;j<NUM;j++) //以下三行 找到每一趟当中最小的元素下标 用k记录下来 
			if (a[k] > a[j])
				k=j;
		if (k != i) //如果最小的元素下标k和i不一样 那么就交换以下顺序
		{
			t = a[i];
			a[i] = a[k];
			a[k] = t;
		}
	}
	printf("the sorted numbers:\n");
	for ( i = 0; i < NUM; i++)
		printf("%d ",a[i]);
	
	
	return 0;
} 
*/

/*7-5输入多个学生的成绩 统计出最高分 最低分 及格人数 及格率以及超过平均分的人数
#include<stdio.h>
#define NUM 100

int main(){
	int i,stu_num;
	float score[NUM];
	float maxscore,minscore;
	float avescore,passratio;
	int great60,greatavescore; //及格人数 超过平均分的人数

	while (1)
	{
		printf("input the number of student(<=%d):",NUM);
		scanf("%d",&stu_num);
		if (stu_num >= 1 && stu_num <= NUM)
			break;
		printf("wrong input ! try again!\n");
	}

	avescore = 0;
	for ( i = 0; i < stu_num; i++)
	{
		printf("input the score of the %dth student:",i+1);
		scanf("%f",&score[i]);
		avescore += score[i];
	}
	avescore /= stu_num;

	//计算最高分 最低分 及格人数 超过平均分人数
	maxscore = 0;
	minscore = 100;
	great60 = 0;
	greatavescore = 0;
	for ( i = 0; i < stu_num; i++)
	{
		maxscore = score[i] > maxscore ? score[i] : maxscore;
		minscore = score[i] < minscore ? score[i] : minscore;
		if (score[i] >= 60)
			great60++;
		if (score[i] >= avescore)
			greatavescore++;
	}
	passratio = 1.0 * great60 / stu_num;

	printf("======total result ======\n");
	printf("high is %.2f\n",maxscore);
	printf("lowest is %.2f\n",minscore);
	printf("average is %.2f\n",avescore);
	printf("passration is %.2f%%\n",passratio * 100);
	printf("number pass is %d\n",great60);
	printf("the number of exceed average is %d\n",greatavescore);
	
}*/

/*7-6 有一个3*4矩阵 编写程序求出其中最大元素值以及其所在行列号
#include <stdio.h>
int main(){
	int i,j,row=0,col=0,max;
	int a[3][4]={{1,2,3,4},{9,8,7,6},{-10,10,-5,2}};
	max = a[0][0];
	for (i = 0; i < 3; i++)
	{
		for ( j = 0;j < 4;j++)
		{
			if (a[i][j] > max)
			{
				max = a[i][j];
				row = i;
				col = j;
			}
		}
	}
	printf("max = %d,row = %d,col = %d\n",max,row,col);
}*/

/*7-7 输入多个学生多门课程的成绩，分别求每个学生的平均成绩和每门课程的平均成绩
#include<stdio.h>
#define NUM_std 5 //表示学生的人数是5
#define NUM_course 4 //表示课程门数是4

int main(){
	float socre[NUM_std+1][NUM_course+1] = {0}; //定义成绩数组，各元素的初值是0

	//往二维数组当中输入数据
	for (int i = 0; i < NUM_std; i++)
	{
		for (int j = 0;j < NUM_course; j++)
		{
			printf("input the mark of %dth course of %dth student:",j+1,i+1);
			scanf("%f",&socre[i][j]);
		}
	}

	//计算成绩
	for (int i = 0; i < NUM_std; i++)
	{
		for (int j = 0; j < NUM_course; j++)
		{
			socre[i][NUM_course] += socre[i][j];
			socre[NUM_std][j] += socre[i][j];
		}
		socre[i][NUM_course] /= NUM_course;
	}
	for (int j = 0;j<NUM_course;j++)
		socre[NUM_std][j] /= NUM_course;

	//输出数据
	printf("NO       C1      C2     C3    C4     AVER\n");
	for (int i = 0; i < NUM_std; i++)
	{
		printf("STU%d\t",i+1);
		for (int j = 0; j < NUM_course+1; j++)
			printf("%6.1f\t",socre[i][j]);
		printf("\n");
	}
	printf("------------");
	printf("\nAVER_C ");
	for (int j = 0; j < NUM_course;j++)
	{
		printf("%6.1f\t",socre[NUM_std][j]);
	}
	printf("\n");

	return 0;
}*/

/*7-8 输入一行字符，统计其中单词的个数，单词之间用空格间隔
#include<stdio.h>

#define IN 1
#define OUT 0

int main(){
	char string[80],c;
	int num = 0;
	int word = OUT;

	gets(string);
	for (int i = 0; (c=string[i])!='\0'; i++) //把输入的字符都遍历一遍
	{
		if (c == ' ')
		{
			word = OUT;
		}
		else
		{
			if (word == OUT)
			{
				word = IN;
				num++;
			}
		}
	}
	printf("There are %d words in the line\n",num);
	
	return 0;
}
//这里IN OUT的设计还挺巧妙的 只有当当前的字符不是空格并且它的前一个字符是空格符的时候才算是一个单词
*/

/*7-9用 * 号输出C语言
#include<stdio.h>
#include<string.h>
int main(){
	char word[][80] = 
	{
		"**********             ** ",
		"***     8*********888 888 *** ",
		"*******  88888*************",
		"" //这个空串是用来判断的 
	};
	for (int i = 0;strlen(word[i]) != 0; i++) //当字符数组头元素不是空的时候 就把整个字符串输出出来
		printf("%s\n",word[i]);


	return 0;
}
*/

/*7-10 输入多个城市的名字 按升序排列输出
#include<stdio.h>
#include<string.h>
#define CITYNUM 5
int main(){
	char city[CITYNUM][20]; //用来存放城市名字的字符串
	char str[80];//整个字符数组是缓冲用的

	int num = 0;
	for (int i = 0; i < CITYNUM; i++) //输入城市名字符串 
	{
		printf("input the name of the %dth city:",i+1);
		gets(str);
		if (str[0] == 0) //如果输入是空串的话 表示输入结束
			break;
		if (strlen(str) > 19) //如果城市名字太长了 提醒重新输入
		{
			i--;
			continue;
		}
		strcpy(city[i],str); //把输入的城市的名字保存至数组当中 数量++
		num++;
	}

	int k,j;
	for (int i = 0; i < num-1; i++) //选择排序
	{
		k = i;
		for (j = i+1;j < num;j++)
		{
			if (stricmp(city[k],city[j]) > 0)
				k = j;
		}
		if (k != j)
		{
			strcpy(str,city[i]);
			strcpy(city[i],city[k]);
			strcpy(city[k],str);
		}
	}

	for (int i = 0; i < num; i++)
		printf("%s  ",city[i]);
	printf("\n");

	return 0;
}
//对一个二维字符数组进行操作
//选择排序具体咋回事来着 不记得了
*/
