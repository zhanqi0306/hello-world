int partition(int arr[], int low, int high){
    int key;
    key = arr[low];
    while(low<high){
        while(low <high && arr[high]>= key )
            high--;
        if(low<high)
            arr[low++] = arr[high];
        while( low<high && arr[low]<=key )
            low++;
        if(low<high)
            arr[high--] = arr[low];
    }
    arr[low] = key;

    return low;
}

//改进形式的快排 可以拿到第K小的元素值
int quick_sort(int arr[], int start, int end,int k){
    int pos;
    if (start<=end){
        pos = partition(arr, start, end);
        if (pos > k-1)//如果主元的位置大于K
        {
            quick_sort(arr,start,pos-1,k);
        }else if(pos < k-1){
            quick_sort(arr,pos+1,end,k);
        }else if(pos == k-1){
            return arr[k-1];
        }
    }
    return;
}

int majorityElement(int* nums, int numsSize){
    int mid = 1 + ((numsSize-1)>>1);
    return quick_sort(nums,0,numsSize-1,mid);
}