/*
剪邮票

如【图1.jpg】, 有12张连在一起的12生肖的邮票。
现在你要从中剪下5张来，要求必须是连着的。
（仅仅连接一个角不算相连）
比如，【图2.jpg】，【图3.jpg】中，粉红色所示部分就是合格的剪取。

请你计算，一共有多少种不同的剪取方法。

请填写表示方案数目的整数。
注意：你提交的应该是一个整数，不要填写任何多余的内容或说明性文字。
*/

#include<iostream>
#include<algorithm>
#include<vector>
using namespace std;
int res = 0;
int matr[3][4];

void dfs(int hang,int lie){
    matr[hang][lie] = 0;
    if(hang+1<=2 && matr[hang+1][lie]==1) dfs(hang+1,lie);
    if(hang-1>=0 && matr[hang-1][lie]==1) dfs(hang-1,lie);
    if(lie+1<=3 && matr[hang][lie+1]==1) dfs(hang,lie+1);
    if(lie-1>=0 && matr[hang][lie-1]==1) dfs(hang,lie-1);
}

//连通性检查的函数，五个元素只有按要求联通在一起，才算一个路径，如果结果是1，就返回true;
bool check(){
    int ans = 0;
    for (int m = 0;m<3;m++)
    {
        for (int n = 0;n<4;n++)
        {
            if (matr[m][n]==1)//如果有元素是1，对这个元素进行dfs，遇到1就把它变成0
            {
                dfs(m,n);
                ans++;
            }
        }
    }
    return ans==1;
}

void trackbacking(vector<int> & arr){
    do
    {
        //检查当前排列的情况是否符合规范
        //先把当前一维数组当中的信息映射到三行四列二维数组当中
        //然后对这个二维数组中进行联通性检查，如果检查成功的话，就算一个
        for (int i = 0; i < 3; i++)
        {
            for (int j = 0; j < 4; j++)
            {
                matr[i][j] = arr[4 * i + j];
            }
        }
        if (check())
            res++;
        
    } while (next_permutation(arr.begin(),arr.end()));
}

int main(int argc, char const *argv[])
{
    vector<int> arr{0,0,0,0,0,0,0,1,1,1,1,1};
    trackbacking(arr);
    cout << res << endl;
    return 0;
    
}
